/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelivery_cl.MtcTaskPlanned;
import com.redel_citilink.redelivery_cl.service.MtcTaskPlannedService;


/**
 * Controller object for domain model class MtcTaskPlanned.
 * @see MtcTaskPlanned
 */
@RestController("redelivery_cl.MtcTaskPlannedController")
@Api(value = "MtcTaskPlannedController", description = "Exposes APIs to work with MtcTaskPlanned resource.")
@RequestMapping("/redelivery_cl/MtcTaskPlanned")
public class MtcTaskPlannedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MtcTaskPlannedController.class);

    @Autowired
	@Qualifier("redelivery_cl.MtcTaskPlannedService")
	private MtcTaskPlannedService mtcTaskPlannedService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new MtcTaskPlanned instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MtcTaskPlanned createMtcTaskPlanned(@RequestBody MtcTaskPlanned mtcTaskPlanned) {
		LOGGER.debug("Create MtcTaskPlanned with information: {}" , mtcTaskPlanned);

		mtcTaskPlanned = mtcTaskPlannedService.create(mtcTaskPlanned);
		LOGGER.debug("Created MtcTaskPlanned with information: {}" , mtcTaskPlanned);

	    return mtcTaskPlanned;
	}

    @ApiOperation(value = "Returns the MtcTaskPlanned instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MtcTaskPlanned getMtcTaskPlanned(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting MtcTaskPlanned with id: {}" , id);

        MtcTaskPlanned foundMtcTaskPlanned = mtcTaskPlannedService.getById(id);
        LOGGER.debug("MtcTaskPlanned details with id: {}" , foundMtcTaskPlanned);

        return foundMtcTaskPlanned;
    }

    @ApiOperation(value = "Updates the MtcTaskPlanned instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MtcTaskPlanned editMtcTaskPlanned(@PathVariable("id") Integer id, @RequestBody MtcTaskPlanned mtcTaskPlanned) {
        LOGGER.debug("Editing MtcTaskPlanned with id: {}" , mtcTaskPlanned.getId());

        mtcTaskPlanned.setId(id);
        mtcTaskPlanned = mtcTaskPlannedService.update(mtcTaskPlanned);
        LOGGER.debug("MtcTaskPlanned details with id: {}" , mtcTaskPlanned);

        return mtcTaskPlanned;
    }

    @ApiOperation(value = "Deletes the MtcTaskPlanned instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMtcTaskPlanned(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting MtcTaskPlanned with id: {}" , id);

        MtcTaskPlanned deletedMtcTaskPlanned = mtcTaskPlannedService.delete(id);

        return deletedMtcTaskPlanned != null;
    }

    /**
     * @deprecated Use {@link #findMtcTaskPlanneds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MtcTaskPlanned instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<MtcTaskPlanned> searchMtcTaskPlannedsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MtcTaskPlanneds list by query filter:{}", (Object) queryFilters);
        return mtcTaskPlannedService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MtcTaskPlanned instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MtcTaskPlanned> findMtcTaskPlanneds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MtcTaskPlanneds list by filter:", query);
        return mtcTaskPlannedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MtcTaskPlanned instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<MtcTaskPlanned> filterMtcTaskPlanneds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MtcTaskPlanneds list by filter", query);
        return mtcTaskPlannedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportMtcTaskPlanneds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return mtcTaskPlannedService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportMtcTaskPlannedsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = MtcTaskPlanned.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> mtcTaskPlannedService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of MtcTaskPlanned instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countMtcTaskPlanneds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MtcTaskPlanneds");
		return mtcTaskPlannedService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getMtcTaskPlannedAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return mtcTaskPlannedService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MtcTaskPlannedService instance
	 */
	protected void setMtcTaskPlannedService(MtcTaskPlannedService service) {
		this.mtcTaskPlannedService = service;
	}

}