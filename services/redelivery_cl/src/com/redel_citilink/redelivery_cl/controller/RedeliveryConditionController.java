/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelivery_cl.RedeliveryCondition;
import com.redel_citilink.redelivery_cl.service.RedeliveryConditionService;


/**
 * Controller object for domain model class RedeliveryCondition.
 * @see RedeliveryCondition
 */
@RestController("redelivery_cl.RedeliveryConditionController")
@Api(value = "RedeliveryConditionController", description = "Exposes APIs to work with RedeliveryCondition resource.")
@RequestMapping("/redelivery_cl/RedeliveryCondition")
public class RedeliveryConditionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedeliveryConditionController.class);

    @Autowired
	@Qualifier("redelivery_cl.RedeliveryConditionService")
	private RedeliveryConditionService redeliveryConditionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new RedeliveryCondition instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeliveryCondition createRedeliveryCondition(@RequestBody RedeliveryCondition redeliveryCondition) {
		LOGGER.debug("Create RedeliveryCondition with information: {}" , redeliveryCondition);

		redeliveryCondition = redeliveryConditionService.create(redeliveryCondition);
		LOGGER.debug("Created RedeliveryCondition with information: {}" , redeliveryCondition);

	    return redeliveryCondition;
	}

    @ApiOperation(value = "Returns the RedeliveryCondition instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeliveryCondition getRedeliveryCondition(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting RedeliveryCondition with id: {}" , id);

        RedeliveryCondition foundRedeliveryCondition = redeliveryConditionService.getById(id);
        LOGGER.debug("RedeliveryCondition details with id: {}" , foundRedeliveryCondition);

        return foundRedeliveryCondition;
    }

    @ApiOperation(value = "Updates the RedeliveryCondition instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeliveryCondition editRedeliveryCondition(@PathVariable("id") Integer id, @RequestBody RedeliveryCondition redeliveryCondition) {
        LOGGER.debug("Editing RedeliveryCondition with id: {}" , redeliveryCondition.getId());

        redeliveryCondition.setId(id);
        redeliveryCondition = redeliveryConditionService.update(redeliveryCondition);
        LOGGER.debug("RedeliveryCondition details with id: {}" , redeliveryCondition);

        return redeliveryCondition;
    }

    @ApiOperation(value = "Deletes the RedeliveryCondition instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRedeliveryCondition(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting RedeliveryCondition with id: {}" , id);

        RedeliveryCondition deletedRedeliveryCondition = redeliveryConditionService.delete(id);

        return deletedRedeliveryCondition != null;
    }

    /**
     * @deprecated Use {@link #findRedeliveryConditions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RedeliveryCondition instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryCondition> searchRedeliveryConditionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RedeliveryConditions list by query filter:{}", (Object) queryFilters);
        return redeliveryConditionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RedeliveryCondition instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryCondition> findRedeliveryConditions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RedeliveryConditions list by filter:", query);
        return redeliveryConditionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RedeliveryCondition instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryCondition> filterRedeliveryConditions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RedeliveryConditions list by filter", query);
        return redeliveryConditionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRedeliveryConditions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return redeliveryConditionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRedeliveryConditionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = RedeliveryCondition.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> redeliveryConditionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of RedeliveryCondition instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRedeliveryConditions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RedeliveryConditions");
		return redeliveryConditionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRedeliveryConditionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return redeliveryConditionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RedeliveryConditionService instance
	 */
	protected void setRedeliveryConditionService(RedeliveryConditionService service) {
		this.redeliveryConditionService = service;
	}

}