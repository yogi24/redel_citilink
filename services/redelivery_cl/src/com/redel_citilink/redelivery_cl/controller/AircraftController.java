/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelivery_cl.Aircraft;
import com.redel_citilink.redelivery_cl.AircraftUtilization;
import com.redel_citilink.redelivery_cl.MtcTaskPlanned;
import com.redel_citilink.redelivery_cl.RedeliveryCondition;
import com.redel_citilink.redelivery_cl.service.AircraftService;


/**
 * Controller object for domain model class Aircraft.
 * @see Aircraft
 */
@RestController("redelivery_cl.AircraftController")
@Api(value = "AircraftController", description = "Exposes APIs to work with Aircraft resource.")
@RequestMapping("/redelivery_cl/Aircraft")
public class AircraftController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftController.class);

    @Autowired
	@Qualifier("redelivery_cl.AircraftService")
	private AircraftService aircraftService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Aircraft instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Aircraft createAircraft(@RequestBody Aircraft aircraft) {
		LOGGER.debug("Create Aircraft with information: {}" , aircraft);

		aircraft = aircraftService.create(aircraft);
		LOGGER.debug("Created Aircraft with information: {}" , aircraft);

	    return aircraft;
	}

    @ApiOperation(value = "Returns the Aircraft instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Aircraft getAircraft(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Aircraft with id: {}" , id);

        Aircraft foundAircraft = aircraftService.getById(id);
        LOGGER.debug("Aircraft details with id: {}" , foundAircraft);

        return foundAircraft;
    }

    @ApiOperation(value = "Updates the Aircraft instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Aircraft editAircraft(@PathVariable("id") Integer id, @RequestBody Aircraft aircraft) {
        LOGGER.debug("Editing Aircraft with id: {}" , aircraft.getId());

        aircraft.setId(id);
        aircraft = aircraftService.update(aircraft);
        LOGGER.debug("Aircraft details with id: {}" , aircraft);

        return aircraft;
    }

    @ApiOperation(value = "Deletes the Aircraft instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAircraft(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Aircraft with id: {}" , id);

        Aircraft deletedAircraft = aircraftService.delete(id);

        return deletedAircraft != null;
    }

    /**
     * @deprecated Use {@link #findAircrafts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Aircraft instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Aircraft> searchAircraftsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Aircrafts list by query filter:{}", (Object) queryFilters);
        return aircraftService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Aircraft instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Aircraft> findAircrafts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Aircrafts list by filter:", query);
        return aircraftService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Aircraft instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Aircraft> filterAircrafts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Aircrafts list by filter", query);
        return aircraftService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportAircrafts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return aircraftService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAircraftsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Aircraft.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> aircraftService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Aircraft instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countAircrafts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Aircrafts");
		return aircraftService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getAircraftAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return aircraftService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/redeliveryConditions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the redeliveryConditions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryCondition> findAssociatedRedeliveryConditions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated redeliveryConditions");
        return aircraftService.findAssociatedRedeliveryConditions(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/mtcTaskPlanneds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the mtcTaskPlanneds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MtcTaskPlanned> findAssociatedMtcTaskPlanneds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated mtcTaskPlanneds");
        return aircraftService.findAssociatedMtcTaskPlanneds(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/aircraftUtilizations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the aircraftUtilizations instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftUtilization> findAssociatedAircraftUtilizations(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated aircraftUtilizations");
        return aircraftService.findAssociatedAircraftUtilizations(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AircraftService instance
	 */
	protected void setAircraftService(AircraftService service) {
		this.aircraftService = service;
	}

}