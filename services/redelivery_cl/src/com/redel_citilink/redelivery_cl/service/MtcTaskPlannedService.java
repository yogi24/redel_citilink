/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelivery_cl.MtcTaskPlanned;

/**
 * Service object for domain model class {@link MtcTaskPlanned}.
 */
public interface MtcTaskPlannedService {

    /**
     * Creates a new MtcTaskPlanned. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MtcTaskPlanned if any.
     *
     * @param mtcTaskPlanned Details of the MtcTaskPlanned to be created; value cannot be null.
     * @return The newly created MtcTaskPlanned.
     */
    MtcTaskPlanned create(@Valid MtcTaskPlanned mtcTaskPlanned);


	/**
     * Returns MtcTaskPlanned by given id if exists.
     *
     * @param mtctaskplannedId The id of the MtcTaskPlanned to get; value cannot be null.
     * @return MtcTaskPlanned associated with the given mtctaskplannedId.
	 * @throws EntityNotFoundException If no MtcTaskPlanned is found.
     */
    MtcTaskPlanned getById(Integer mtctaskplannedId);

    /**
     * Find and return the MtcTaskPlanned by given id if exists, returns null otherwise.
     *
     * @param mtctaskplannedId The id of the MtcTaskPlanned to get; value cannot be null.
     * @return MtcTaskPlanned associated with the given mtctaskplannedId.
     */
    MtcTaskPlanned findById(Integer mtctaskplannedId);

	/**
     * Find and return the list of MtcTaskPlanneds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param mtctaskplannedIds The id's of the MtcTaskPlanned to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return MtcTaskPlanneds associated with the given mtctaskplannedIds.
     */
    List<MtcTaskPlanned> findByMultipleIds(List<Integer> mtctaskplannedIds, boolean orderedReturn);


    /**
     * Updates the details of an existing MtcTaskPlanned. It replaces all fields of the existing MtcTaskPlanned with the given mtcTaskPlanned.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MtcTaskPlanned if any.
     *
     * @param mtcTaskPlanned The details of the MtcTaskPlanned to be updated; value cannot be null.
     * @return The updated MtcTaskPlanned.
     * @throws EntityNotFoundException if no MtcTaskPlanned is found with given input.
     */
    MtcTaskPlanned update(@Valid MtcTaskPlanned mtcTaskPlanned);

    /**
     * Deletes an existing MtcTaskPlanned with the given id.
     *
     * @param mtctaskplannedId The id of the MtcTaskPlanned to be deleted; value cannot be null.
     * @return The deleted MtcTaskPlanned.
     * @throws EntityNotFoundException if no MtcTaskPlanned found with the given id.
     */
    MtcTaskPlanned delete(Integer mtctaskplannedId);

    /**
     * Deletes an existing MtcTaskPlanned with the given object.
     *
     * @param mtcTaskPlanned The instance of the MtcTaskPlanned to be deleted; value cannot be null.
     */
    void delete(MtcTaskPlanned mtcTaskPlanned);

    /**
     * Find all MtcTaskPlanneds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MtcTaskPlanneds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<MtcTaskPlanned> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all MtcTaskPlanneds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MtcTaskPlanneds.
     *
     * @see Pageable
     * @see Page
     */
    Page<MtcTaskPlanned> findAll(String query, Pageable pageable);

    /**
     * Exports all MtcTaskPlanneds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all MtcTaskPlanneds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the MtcTaskPlanneds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the MtcTaskPlanned.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}