/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelivery_cl.AircraftUtilization;


/**
 * ServiceImpl object for domain model class AircraftUtilization.
 *
 * @see AircraftUtilization
 */
@Service("redelivery_cl.AircraftUtilizationService")
@Validated
public class AircraftUtilizationServiceImpl implements AircraftUtilizationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftUtilizationServiceImpl.class);


    @Autowired
    @Qualifier("redelivery_cl.AircraftUtilizationDao")
    private WMGenericDao<AircraftUtilization, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AircraftUtilization, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public AircraftUtilization create(AircraftUtilization aircraftUtilization) {
        LOGGER.debug("Creating a new AircraftUtilization with information: {}", aircraftUtilization);

        AircraftUtilization aircraftUtilizationCreated = this.wmGenericDao.create(aircraftUtilization);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(aircraftUtilizationCreated);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public AircraftUtilization getById(Integer aircraftutilizationId) {
        LOGGER.debug("Finding AircraftUtilization by id: {}", aircraftutilizationId);
        return this.wmGenericDao.findById(aircraftutilizationId);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public AircraftUtilization findById(Integer aircraftutilizationId) {
        LOGGER.debug("Finding AircraftUtilization by id: {}", aircraftutilizationId);
        try {
            return this.wmGenericDao.findById(aircraftutilizationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AircraftUtilization found with id: {}", aircraftutilizationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public List<AircraftUtilization> findByMultipleIds(List<Integer> aircraftutilizationIds, boolean orderedReturn) {
        LOGGER.debug("Finding AircraftUtilizations by ids: {}", aircraftutilizationIds);

        return this.wmGenericDao.findByMultipleIds(aircraftutilizationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelivery_clTransactionManager")
    @Override
    public AircraftUtilization update(AircraftUtilization aircraftUtilization) {
        LOGGER.debug("Updating AircraftUtilization with information: {}", aircraftUtilization);

        this.wmGenericDao.update(aircraftUtilization);
        this.wmGenericDao.refresh(aircraftUtilization);

        return aircraftUtilization;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public AircraftUtilization delete(Integer aircraftutilizationId) {
        LOGGER.debug("Deleting AircraftUtilization with id: {}", aircraftutilizationId);
        AircraftUtilization deleted = this.wmGenericDao.findById(aircraftutilizationId);
        if (deleted == null) {
            LOGGER.debug("No AircraftUtilization found with id: {}", aircraftutilizationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AircraftUtilization.class.getSimpleName(), aircraftutilizationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public void delete(AircraftUtilization aircraftUtilization) {
        LOGGER.debug("Deleting AircraftUtilization with {}", aircraftUtilization);
        this.wmGenericDao.delete(aircraftUtilization);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<AircraftUtilization> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AircraftUtilizations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<AircraftUtilization> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AircraftUtilizations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelivery_cl for table AircraftUtilization to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelivery_cl for table AircraftUtilization to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}