/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelivery_cl.Aircraft;
import com.redel_citilink.redelivery_cl.AircraftType;


/**
 * ServiceImpl object for domain model class AircraftType.
 *
 * @see AircraftType
 */
@Service("redelivery_cl.AircraftTypeService")
@Validated
public class AircraftTypeServiceImpl implements AircraftTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("redelivery_cl.AircraftService")
    private AircraftService aircraftService;

    @Autowired
    @Qualifier("redelivery_cl.AircraftTypeDao")
    private WMGenericDao<AircraftType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AircraftType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public AircraftType create(AircraftType aircraftType) {
        LOGGER.debug("Creating a new AircraftType with information: {}", aircraftType);

        AircraftType aircraftTypeCreated = this.wmGenericDao.create(aircraftType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(aircraftTypeCreated);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public AircraftType getById(Integer aircrafttypeId) {
        LOGGER.debug("Finding AircraftType by id: {}", aircrafttypeId);
        return this.wmGenericDao.findById(aircrafttypeId);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public AircraftType findById(Integer aircrafttypeId) {
        LOGGER.debug("Finding AircraftType by id: {}", aircrafttypeId);
        try {
            return this.wmGenericDao.findById(aircrafttypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AircraftType found with id: {}", aircrafttypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public List<AircraftType> findByMultipleIds(List<Integer> aircrafttypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding AircraftTypes by ids: {}", aircrafttypeIds);

        return this.wmGenericDao.findByMultipleIds(aircrafttypeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelivery_clTransactionManager")
    @Override
    public AircraftType update(AircraftType aircraftType) {
        LOGGER.debug("Updating AircraftType with information: {}", aircraftType);

        List<Aircraft> aircrafts = aircraftType.getAircrafts();
        if(aircrafts != null && Hibernate.isInitialized(aircrafts)) {
            aircrafts.forEach(_aircraft -> _aircraft.setAircraftType(aircraftType));
        }

        this.wmGenericDao.update(aircraftType);
        this.wmGenericDao.refresh(aircraftType);

        // Deleting children which are not present in the list.
        if(aircrafts != null && Hibernate.isInitialized(aircrafts) && !aircrafts.isEmpty()) {
            List<Aircraft> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Aircraft.class,
                        new DaoUtils.ChildrenFilter<>("aircraftType", aircraftType, aircrafts)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_aircraft -> aircraftService.delete(_aircraft));
            aircraftType.setAircrafts(aircrafts);
        }

        return aircraftType;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public AircraftType delete(Integer aircrafttypeId) {
        LOGGER.debug("Deleting AircraftType with id: {}", aircrafttypeId);
        AircraftType deleted = this.wmGenericDao.findById(aircrafttypeId);
        if (deleted == null) {
            LOGGER.debug("No AircraftType found with id: {}", aircrafttypeId);
            throw new EntityNotFoundException(String.valueOf(aircrafttypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public void delete(AircraftType aircraftType) {
        LOGGER.debug("Deleting AircraftType with {}", aircraftType);
        this.wmGenericDao.delete(aircraftType);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<AircraftType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AircraftTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<AircraftType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AircraftTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelivery_cl for table AircraftType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelivery_cl for table AircraftType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<Aircraft> findAssociatedAircrafts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated aircrafts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("aircraftType.id = '" + id + "'");

        return aircraftService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AircraftService instance
     */
    protected void setAircraftService(AircraftService service) {
        this.aircraftService = service;
    }

}