/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelivery_cl.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelivery_cl.MtcTaskPlanned;


/**
 * ServiceImpl object for domain model class MtcTaskPlanned.
 *
 * @see MtcTaskPlanned
 */
@Service("redelivery_cl.MtcTaskPlannedService")
@Validated
public class MtcTaskPlannedServiceImpl implements MtcTaskPlannedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MtcTaskPlannedServiceImpl.class);


    @Autowired
    @Qualifier("redelivery_cl.MtcTaskPlannedDao")
    private WMGenericDao<MtcTaskPlanned, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MtcTaskPlanned, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public MtcTaskPlanned create(MtcTaskPlanned mtcTaskPlanned) {
        LOGGER.debug("Creating a new MtcTaskPlanned with information: {}", mtcTaskPlanned);

        MtcTaskPlanned mtcTaskPlannedCreated = this.wmGenericDao.create(mtcTaskPlanned);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(mtcTaskPlannedCreated);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public MtcTaskPlanned getById(Integer mtctaskplannedId) {
        LOGGER.debug("Finding MtcTaskPlanned by id: {}", mtctaskplannedId);
        return this.wmGenericDao.findById(mtctaskplannedId);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public MtcTaskPlanned findById(Integer mtctaskplannedId) {
        LOGGER.debug("Finding MtcTaskPlanned by id: {}", mtctaskplannedId);
        try {
            return this.wmGenericDao.findById(mtctaskplannedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No MtcTaskPlanned found with id: {}", mtctaskplannedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public List<MtcTaskPlanned> findByMultipleIds(List<Integer> mtctaskplannedIds, boolean orderedReturn) {
        LOGGER.debug("Finding MtcTaskPlanneds by ids: {}", mtctaskplannedIds);

        return this.wmGenericDao.findByMultipleIds(mtctaskplannedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelivery_clTransactionManager")
    @Override
    public MtcTaskPlanned update(MtcTaskPlanned mtcTaskPlanned) {
        LOGGER.debug("Updating MtcTaskPlanned with information: {}", mtcTaskPlanned);

        this.wmGenericDao.update(mtcTaskPlanned);
        this.wmGenericDao.refresh(mtcTaskPlanned);

        return mtcTaskPlanned;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public MtcTaskPlanned delete(Integer mtctaskplannedId) {
        LOGGER.debug("Deleting MtcTaskPlanned with id: {}", mtctaskplannedId);
        MtcTaskPlanned deleted = this.wmGenericDao.findById(mtctaskplannedId);
        if (deleted == null) {
            LOGGER.debug("No MtcTaskPlanned found with id: {}", mtctaskplannedId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), MtcTaskPlanned.class.getSimpleName(), mtctaskplannedId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelivery_clTransactionManager")
    @Override
    public void delete(MtcTaskPlanned mtcTaskPlanned) {
        LOGGER.debug("Deleting MtcTaskPlanned with {}", mtcTaskPlanned);
        this.wmGenericDao.delete(mtcTaskPlanned);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<MtcTaskPlanned> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MtcTaskPlanneds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<MtcTaskPlanned> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MtcTaskPlanneds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelivery_cl for table MtcTaskPlanned to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelivery_cl for table MtcTaskPlanned to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelivery_clTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}