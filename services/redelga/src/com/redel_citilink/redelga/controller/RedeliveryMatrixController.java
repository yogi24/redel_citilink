/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelga.RedeliveryMatrix;
import com.redel_citilink.redelga.service.RedeliveryMatrixService;


/**
 * Controller object for domain model class RedeliveryMatrix.
 * @see RedeliveryMatrix
 */
@RestController("redelga.RedeliveryMatrixController")
@Api(value = "RedeliveryMatrixController", description = "Exposes APIs to work with RedeliveryMatrix resource.")
@RequestMapping("/redelga/RedeliveryMatrix")
public class RedeliveryMatrixController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedeliveryMatrixController.class);

    @Autowired
	@Qualifier("redelga.RedeliveryMatrixService")
	private RedeliveryMatrixService redeliveryMatrixService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new RedeliveryMatrix instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeliveryMatrix createRedeliveryMatrix(@RequestBody RedeliveryMatrix redeliveryMatrix) {
		LOGGER.debug("Create RedeliveryMatrix with information: {}" , redeliveryMatrix);

		redeliveryMatrix = redeliveryMatrixService.create(redeliveryMatrix);
		LOGGER.debug("Created RedeliveryMatrix with information: {}" , redeliveryMatrix);

	    return redeliveryMatrix;
	}

    @ApiOperation(value = "Returns the RedeliveryMatrix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeliveryMatrix getRedeliveryMatrix(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting RedeliveryMatrix with id: {}" , id);

        RedeliveryMatrix foundRedeliveryMatrix = redeliveryMatrixService.getById(id);
        LOGGER.debug("RedeliveryMatrix details with id: {}" , foundRedeliveryMatrix);

        return foundRedeliveryMatrix;
    }

    @ApiOperation(value = "Updates the RedeliveryMatrix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeliveryMatrix editRedeliveryMatrix(@PathVariable("id") Integer id, @RequestBody RedeliveryMatrix redeliveryMatrix) {
        LOGGER.debug("Editing RedeliveryMatrix with id: {}" , redeliveryMatrix.getId());

        redeliveryMatrix.setId(id);
        redeliveryMatrix = redeliveryMatrixService.update(redeliveryMatrix);
        LOGGER.debug("RedeliveryMatrix details with id: {}" , redeliveryMatrix);

        return redeliveryMatrix;
    }

    @ApiOperation(value = "Deletes the RedeliveryMatrix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRedeliveryMatrix(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting RedeliveryMatrix with id: {}" , id);

        RedeliveryMatrix deletedRedeliveryMatrix = redeliveryMatrixService.delete(id);

        return deletedRedeliveryMatrix != null;
    }

    /**
     * @deprecated Use {@link #findRedeliveryMatrices(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RedeliveryMatrix instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryMatrix> searchRedeliveryMatricesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RedeliveryMatrices list by query filter:{}", (Object) queryFilters);
        return redeliveryMatrixService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RedeliveryMatrix instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryMatrix> findRedeliveryMatrices(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RedeliveryMatrices list by filter:", query);
        return redeliveryMatrixService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RedeliveryMatrix instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeliveryMatrix> filterRedeliveryMatrices(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RedeliveryMatrices list by filter", query);
        return redeliveryMatrixService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRedeliveryMatrices(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return redeliveryMatrixService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRedeliveryMatricesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = RedeliveryMatrix.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> redeliveryMatrixService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of RedeliveryMatrix instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRedeliveryMatrices( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RedeliveryMatrices");
		return redeliveryMatrixService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRedeliveryMatrixAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return redeliveryMatrixService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RedeliveryMatrixService instance
	 */
	protected void setRedeliveryMatrixService(RedeliveryMatrixService service) {
		this.redeliveryMatrixService = service;
	}

}