/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelga.TaskSchedule;
import com.redel_citilink.redelga.service.TaskScheduleService;


/**
 * Controller object for domain model class TaskSchedule.
 * @see TaskSchedule
 */
@RestController("redelga.TaskScheduleController")
@Api(value = "TaskScheduleController", description = "Exposes APIs to work with TaskSchedule resource.")
@RequestMapping("/redelga/TaskSchedule")
public class TaskScheduleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaskScheduleController.class);

    @Autowired
	@Qualifier("redelga.TaskScheduleService")
	private TaskScheduleService taskScheduleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TaskSchedule instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskSchedule createTaskSchedule(@RequestBody TaskSchedule taskSchedule) {
		LOGGER.debug("Create TaskSchedule with information: {}" , taskSchedule);

		taskSchedule = taskScheduleService.create(taskSchedule);
		LOGGER.debug("Created TaskSchedule with information: {}" , taskSchedule);

	    return taskSchedule;
	}

    @ApiOperation(value = "Returns the TaskSchedule instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskSchedule getTaskSchedule(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TaskSchedule with id: {}" , id);

        TaskSchedule foundTaskSchedule = taskScheduleService.getById(id);
        LOGGER.debug("TaskSchedule details with id: {}" , foundTaskSchedule);

        return foundTaskSchedule;
    }

    @ApiOperation(value = "Updates the TaskSchedule instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskSchedule editTaskSchedule(@PathVariable("id") Integer id, @RequestBody TaskSchedule taskSchedule) {
        LOGGER.debug("Editing TaskSchedule with id: {}" , taskSchedule.getId());

        taskSchedule.setId(id);
        taskSchedule = taskScheduleService.update(taskSchedule);
        LOGGER.debug("TaskSchedule details with id: {}" , taskSchedule);

        return taskSchedule;
    }

    @ApiOperation(value = "Deletes the TaskSchedule instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaskSchedule(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TaskSchedule with id: {}" , id);

        TaskSchedule deletedTaskSchedule = taskScheduleService.delete(id);

        return deletedTaskSchedule != null;
    }

    /**
     * @deprecated Use {@link #findTaskSchedules(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaskSchedule instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskSchedule> searchTaskSchedulesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaskSchedules list by query filter:{}", (Object) queryFilters);
        return taskScheduleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaskSchedule instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskSchedule> findTaskSchedules(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaskSchedules list by filter:", query);
        return taskScheduleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaskSchedule instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskSchedule> filterTaskSchedules(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaskSchedules list by filter", query);
        return taskScheduleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaskSchedules(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taskScheduleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTaskSchedulesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TaskSchedule.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> taskScheduleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TaskSchedule instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaskSchedules( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaskSchedules");
		return taskScheduleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaskScheduleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taskScheduleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaskScheduleService instance
	 */
	protected void setTaskScheduleService(TaskScheduleService service) {
		this.taskScheduleService = service;
	}

}