/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelga.Aircraft;
import com.redel_citilink.redelga.AircraftType;
import com.redel_citilink.redelga.service.AircraftTypeService;


/**
 * Controller object for domain model class AircraftType.
 * @see AircraftType
 */
@RestController("redelga.AircraftTypeController")
@Api(value = "AircraftTypeController", description = "Exposes APIs to work with AircraftType resource.")
@RequestMapping("/redelga/AircraftType")
public class AircraftTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftTypeController.class);

    @Autowired
	@Qualifier("redelga.AircraftTypeService")
	private AircraftTypeService aircraftTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AircraftType instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AircraftType createAircraftType(@RequestBody AircraftType aircraftType) {
		LOGGER.debug("Create AircraftType with information: {}" , aircraftType);

		aircraftType = aircraftTypeService.create(aircraftType);
		LOGGER.debug("Created AircraftType with information: {}" , aircraftType);

	    return aircraftType;
	}

    @ApiOperation(value = "Returns the AircraftType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AircraftType getAircraftType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AircraftType with id: {}" , id);

        AircraftType foundAircraftType = aircraftTypeService.getById(id);
        LOGGER.debug("AircraftType details with id: {}" , foundAircraftType);

        return foundAircraftType;
    }

    @ApiOperation(value = "Updates the AircraftType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AircraftType editAircraftType(@PathVariable("id") Integer id, @RequestBody AircraftType aircraftType) {
        LOGGER.debug("Editing AircraftType with id: {}" , aircraftType.getId());

        aircraftType.setId(id);
        aircraftType = aircraftTypeService.update(aircraftType);
        LOGGER.debug("AircraftType details with id: {}" , aircraftType);

        return aircraftType;
    }

    @ApiOperation(value = "Deletes the AircraftType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAircraftType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AircraftType with id: {}" , id);

        AircraftType deletedAircraftType = aircraftTypeService.delete(id);

        return deletedAircraftType != null;
    }

    /**
     * @deprecated Use {@link #findAircraftTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AircraftType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftType> searchAircraftTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AircraftTypes list by query filter:{}", (Object) queryFilters);
        return aircraftTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AircraftType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftType> findAircraftTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AircraftTypes list by filter:", query);
        return aircraftTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AircraftType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftType> filterAircraftTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AircraftTypes list by filter", query);
        return aircraftTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAircraftTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return aircraftTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAircraftTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AircraftType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> aircraftTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AircraftType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAircraftTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AircraftTypes");
		return aircraftTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAircraftTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return aircraftTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/aircrafts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the aircrafts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Aircraft> findAssociatedAircrafts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated aircrafts");
        return aircraftTypeService.findAssociatedAircrafts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AircraftTypeService instance
	 */
	protected void setAircraftTypeService(AircraftTypeService service) {
		this.aircraftTypeService = service;
	}

}