/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.redel_citilink.redelga.AircraftMtcSchedule;
import com.redel_citilink.redelga.service.AircraftMtcScheduleService;


/**
 * Controller object for domain model class AircraftMtcSchedule.
 * @see AircraftMtcSchedule
 */
@RestController("redelga.AircraftMtcScheduleController")
@Api(value = "AircraftMtcScheduleController", description = "Exposes APIs to work with AircraftMtcSchedule resource.")
@RequestMapping("/redelga/AircraftMtcSchedule")
public class AircraftMtcScheduleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftMtcScheduleController.class);

    @Autowired
	@Qualifier("redelga.AircraftMtcScheduleService")
	private AircraftMtcScheduleService aircraftMtcScheduleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AircraftMtcSchedule instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AircraftMtcSchedule createAircraftMtcSchedule(@RequestBody AircraftMtcSchedule aircraftMtcSchedule) {
		LOGGER.debug("Create AircraftMtcSchedule with information: {}" , aircraftMtcSchedule);

		aircraftMtcSchedule = aircraftMtcScheduleService.create(aircraftMtcSchedule);
		LOGGER.debug("Created AircraftMtcSchedule with information: {}" , aircraftMtcSchedule);

	    return aircraftMtcSchedule;
	}

    @ApiOperation(value = "Returns the AircraftMtcSchedule instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AircraftMtcSchedule getAircraftMtcSchedule(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AircraftMtcSchedule with id: {}" , id);

        AircraftMtcSchedule foundAircraftMtcSchedule = aircraftMtcScheduleService.getById(id);
        LOGGER.debug("AircraftMtcSchedule details with id: {}" , foundAircraftMtcSchedule);

        return foundAircraftMtcSchedule;
    }

    @ApiOperation(value = "Updates the AircraftMtcSchedule instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AircraftMtcSchedule editAircraftMtcSchedule(@PathVariable("id") Integer id, @RequestBody AircraftMtcSchedule aircraftMtcSchedule) {
        LOGGER.debug("Editing AircraftMtcSchedule with id: {}" , aircraftMtcSchedule.getId());

        aircraftMtcSchedule.setId(id);
        aircraftMtcSchedule = aircraftMtcScheduleService.update(aircraftMtcSchedule);
        LOGGER.debug("AircraftMtcSchedule details with id: {}" , aircraftMtcSchedule);

        return aircraftMtcSchedule;
    }

    @ApiOperation(value = "Deletes the AircraftMtcSchedule instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAircraftMtcSchedule(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AircraftMtcSchedule with id: {}" , id);

        AircraftMtcSchedule deletedAircraftMtcSchedule = aircraftMtcScheduleService.delete(id);

        return deletedAircraftMtcSchedule != null;
    }

    /**
     * @deprecated Use {@link #findAircraftMtcSchedules(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AircraftMtcSchedule instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftMtcSchedule> searchAircraftMtcSchedulesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AircraftMtcSchedules list by query filter:{}", (Object) queryFilters);
        return aircraftMtcScheduleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AircraftMtcSchedule instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftMtcSchedule> findAircraftMtcSchedules(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AircraftMtcSchedules list by filter:", query);
        return aircraftMtcScheduleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AircraftMtcSchedule instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AircraftMtcSchedule> filterAircraftMtcSchedules(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AircraftMtcSchedules list by filter", query);
        return aircraftMtcScheduleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAircraftMtcSchedules(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return aircraftMtcScheduleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAircraftMtcSchedulesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AircraftMtcSchedule.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> aircraftMtcScheduleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AircraftMtcSchedule instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAircraftMtcSchedules( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AircraftMtcSchedules");
		return aircraftMtcScheduleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAircraftMtcScheduleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return aircraftMtcScheduleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AircraftMtcScheduleService instance
	 */
	protected void setAircraftMtcScheduleService(AircraftMtcScheduleService service) {
		this.aircraftMtcScheduleService = service;
	}

}