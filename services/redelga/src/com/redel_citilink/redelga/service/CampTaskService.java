/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.CampTask;
import com.redel_citilink.redelga.TaskSchedule;

/**
 * Service object for domain model class {@link CampTask}.
 */
public interface CampTaskService {

    /**
     * Creates a new CampTask. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CampTask if any.
     *
     * @param campTask Details of the CampTask to be created; value cannot be null.
     * @return The newly created CampTask.
     */
    CampTask create(@Valid CampTask campTask);


	/**
     * Returns CampTask by given id if exists.
     *
     * @param camptaskId The id of the CampTask to get; value cannot be null.
     * @return CampTask associated with the given camptaskId.
	 * @throws EntityNotFoundException If no CampTask is found.
     */
    CampTask getById(Integer camptaskId);

    /**
     * Find and return the CampTask by given id if exists, returns null otherwise.
     *
     * @param camptaskId The id of the CampTask to get; value cannot be null.
     * @return CampTask associated with the given camptaskId.
     */
    CampTask findById(Integer camptaskId);

	/**
     * Find and return the list of CampTasks by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param camptaskIds The id's of the CampTask to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CampTasks associated with the given camptaskIds.
     */
    List<CampTask> findByMultipleIds(List<Integer> camptaskIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CampTask. It replaces all fields of the existing CampTask with the given campTask.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CampTask if any.
     *
     * @param campTask The details of the CampTask to be updated; value cannot be null.
     * @return The updated CampTask.
     * @throws EntityNotFoundException if no CampTask is found with given input.
     */
    CampTask update(@Valid CampTask campTask);

    /**
     * Deletes an existing CampTask with the given id.
     *
     * @param camptaskId The id of the CampTask to be deleted; value cannot be null.
     * @return The deleted CampTask.
     * @throws EntityNotFoundException if no CampTask found with the given id.
     */
    CampTask delete(Integer camptaskId);

    /**
     * Deletes an existing CampTask with the given object.
     *
     * @param campTask The instance of the CampTask to be deleted; value cannot be null.
     */
    void delete(CampTask campTask);

    /**
     * Find all CampTasks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CampTasks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CampTask> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CampTasks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CampTasks.
     *
     * @see Pageable
     * @see Page
     */
    Page<CampTask> findAll(String query, Pageable pageable);

    /**
     * Exports all CampTasks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CampTasks matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CampTasks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CampTask.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated taskSchedules for given CampTask id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TaskSchedule instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TaskSchedule> findAssociatedTaskSchedules(Integer id, Pageable pageable);

}