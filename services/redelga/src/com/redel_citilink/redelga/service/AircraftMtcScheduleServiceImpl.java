/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.AircraftMtcSchedule;


/**
 * ServiceImpl object for domain model class AircraftMtcSchedule.
 *
 * @see AircraftMtcSchedule
 */
@Service("redelga.AircraftMtcScheduleService")
@Validated
public class AircraftMtcScheduleServiceImpl implements AircraftMtcScheduleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftMtcScheduleServiceImpl.class);


    @Autowired
    @Qualifier("redelga.AircraftMtcScheduleDao")
    private WMGenericDao<AircraftMtcSchedule, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AircraftMtcSchedule, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public AircraftMtcSchedule create(AircraftMtcSchedule aircraftMtcSchedule) {
        LOGGER.debug("Creating a new AircraftMtcSchedule with information: {}", aircraftMtcSchedule);

        AircraftMtcSchedule aircraftMtcScheduleCreated = this.wmGenericDao.create(aircraftMtcSchedule);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(aircraftMtcScheduleCreated);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public AircraftMtcSchedule getById(Integer aircraftmtcscheduleId) {
        LOGGER.debug("Finding AircraftMtcSchedule by id: {}", aircraftmtcscheduleId);
        return this.wmGenericDao.findById(aircraftmtcscheduleId);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public AircraftMtcSchedule findById(Integer aircraftmtcscheduleId) {
        LOGGER.debug("Finding AircraftMtcSchedule by id: {}", aircraftmtcscheduleId);
        try {
            return this.wmGenericDao.findById(aircraftmtcscheduleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AircraftMtcSchedule found with id: {}", aircraftmtcscheduleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public List<AircraftMtcSchedule> findByMultipleIds(List<Integer> aircraftmtcscheduleIds, boolean orderedReturn) {
        LOGGER.debug("Finding AircraftMtcSchedules by ids: {}", aircraftmtcscheduleIds);

        return this.wmGenericDao.findByMultipleIds(aircraftmtcscheduleIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelgaTransactionManager")
    @Override
    public AircraftMtcSchedule update(AircraftMtcSchedule aircraftMtcSchedule) {
        LOGGER.debug("Updating AircraftMtcSchedule with information: {}", aircraftMtcSchedule);

        this.wmGenericDao.update(aircraftMtcSchedule);
        this.wmGenericDao.refresh(aircraftMtcSchedule);

        return aircraftMtcSchedule;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public AircraftMtcSchedule delete(Integer aircraftmtcscheduleId) {
        LOGGER.debug("Deleting AircraftMtcSchedule with id: {}", aircraftmtcscheduleId);
        AircraftMtcSchedule deleted = this.wmGenericDao.findById(aircraftmtcscheduleId);
        if (deleted == null) {
            LOGGER.debug("No AircraftMtcSchedule found with id: {}", aircraftmtcscheduleId);
            throw new EntityNotFoundException(String.valueOf(aircraftmtcscheduleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public void delete(AircraftMtcSchedule aircraftMtcSchedule) {
        LOGGER.debug("Deleting AircraftMtcSchedule with {}", aircraftMtcSchedule);
        this.wmGenericDao.delete(aircraftMtcSchedule);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<AircraftMtcSchedule> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AircraftMtcSchedules");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<AircraftMtcSchedule> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AircraftMtcSchedules");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelga for table AircraftMtcSchedule to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelga for table AircraftMtcSchedule to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}