/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.AircraftUtilizationInfo;


/**
 * ServiceImpl object for domain model class AircraftUtilizationInfo.
 *
 * @see AircraftUtilizationInfo
 */
@Service("redelga.AircraftUtilizationInfoService")
@Validated
public class AircraftUtilizationInfoServiceImpl implements AircraftUtilizationInfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftUtilizationInfoServiceImpl.class);


    @Autowired
    @Qualifier("redelga.AircraftUtilizationInfoDao")
    private WMGenericDao<AircraftUtilizationInfo, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AircraftUtilizationInfo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public AircraftUtilizationInfo create(AircraftUtilizationInfo aircraftUtilizationInfo) {
        LOGGER.debug("Creating a new AircraftUtilizationInfo with information: {}", aircraftUtilizationInfo);

        AircraftUtilizationInfo aircraftUtilizationInfoCreated = this.wmGenericDao.create(aircraftUtilizationInfo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(aircraftUtilizationInfoCreated);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public AircraftUtilizationInfo getById(Integer aircraftutilizationinfoId) {
        LOGGER.debug("Finding AircraftUtilizationInfo by id: {}", aircraftutilizationinfoId);
        return this.wmGenericDao.findById(aircraftutilizationinfoId);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public AircraftUtilizationInfo findById(Integer aircraftutilizationinfoId) {
        LOGGER.debug("Finding AircraftUtilizationInfo by id: {}", aircraftutilizationinfoId);
        try {
            return this.wmGenericDao.findById(aircraftutilizationinfoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AircraftUtilizationInfo found with id: {}", aircraftutilizationinfoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public List<AircraftUtilizationInfo> findByMultipleIds(List<Integer> aircraftutilizationinfoIds, boolean orderedReturn) {
        LOGGER.debug("Finding AircraftUtilizationInfos by ids: {}", aircraftutilizationinfoIds);

        return this.wmGenericDao.findByMultipleIds(aircraftutilizationinfoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelgaTransactionManager")
    @Override
    public AircraftUtilizationInfo update(AircraftUtilizationInfo aircraftUtilizationInfo) {
        LOGGER.debug("Updating AircraftUtilizationInfo with information: {}", aircraftUtilizationInfo);

        this.wmGenericDao.update(aircraftUtilizationInfo);
        this.wmGenericDao.refresh(aircraftUtilizationInfo);

        return aircraftUtilizationInfo;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public AircraftUtilizationInfo delete(Integer aircraftutilizationinfoId) {
        LOGGER.debug("Deleting AircraftUtilizationInfo with id: {}", aircraftutilizationinfoId);
        AircraftUtilizationInfo deleted = this.wmGenericDao.findById(aircraftutilizationinfoId);
        if (deleted == null) {
            LOGGER.debug("No AircraftUtilizationInfo found with id: {}", aircraftutilizationinfoId);
            throw new EntityNotFoundException(String.valueOf(aircraftutilizationinfoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public void delete(AircraftUtilizationInfo aircraftUtilizationInfo) {
        LOGGER.debug("Deleting AircraftUtilizationInfo with {}", aircraftUtilizationInfo);
        this.wmGenericDao.delete(aircraftUtilizationInfo);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<AircraftUtilizationInfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AircraftUtilizationInfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<AircraftUtilizationInfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AircraftUtilizationInfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelga for table AircraftUtilizationInfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelga for table AircraftUtilizationInfo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}