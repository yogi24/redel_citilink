/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.Aircraft;
import com.redel_citilink.redelga.AircraftMtcSchedule;
import com.redel_citilink.redelga.AircraftUtilizationInfo;
import com.redel_citilink.redelga.RedeliveryMatrix;
import com.redel_citilink.redelga.TaskSchedule;


/**
 * ServiceImpl object for domain model class Aircraft.
 *
 * @see Aircraft
 */
@Service("redelga.AircraftService")
@Validated
public class AircraftServiceImpl implements AircraftService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AircraftServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("redelga.TaskScheduleService")
    private TaskScheduleService taskScheduleService;

    @Lazy
    @Autowired
    @Qualifier("redelga.AircraftMtcScheduleService")
    private AircraftMtcScheduleService aircraftMtcScheduleService;

    @Lazy
    @Autowired
    @Qualifier("redelga.AircraftUtilizationInfoService")
    private AircraftUtilizationInfoService aircraftUtilizationInfoService;

    @Lazy
    @Autowired
    @Qualifier("redelga.RedeliveryMatrixService")
    private RedeliveryMatrixService redeliveryMatrixService;

    @Autowired
    @Qualifier("redelga.AircraftDao")
    private WMGenericDao<Aircraft, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Aircraft, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public Aircraft create(Aircraft aircraft) {
        LOGGER.debug("Creating a new Aircraft with information: {}", aircraft);

        Aircraft aircraftCreated = this.wmGenericDao.create(aircraft);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(aircraftCreated);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Aircraft getById(Integer aircraftId) {
        LOGGER.debug("Finding Aircraft by id: {}", aircraftId);
        return this.wmGenericDao.findById(aircraftId);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Aircraft findById(Integer aircraftId) {
        LOGGER.debug("Finding Aircraft by id: {}", aircraftId);
        try {
            return this.wmGenericDao.findById(aircraftId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Aircraft found with id: {}", aircraftId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public List<Aircraft> findByMultipleIds(List<Integer> aircraftIds, boolean orderedReturn) {
        LOGGER.debug("Finding Aircrafts by ids: {}", aircraftIds);

        return this.wmGenericDao.findByMultipleIds(aircraftIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelgaTransactionManager")
    @Override
    public Aircraft update(Aircraft aircraft) {
        LOGGER.debug("Updating Aircraft with information: {}", aircraft);

        List<AircraftMtcSchedule> aircraftMtcSchedules = aircraft.getAircraftMtcSchedules();
        List<AircraftUtilizationInfo> aircraftUtilizationInfos = aircraft.getAircraftUtilizationInfos();
        List<RedeliveryMatrix> redeliveryMatrixes = aircraft.getRedeliveryMatrixes();
        List<TaskSchedule> taskSchedules = aircraft.getTaskSchedules();
        if(aircraftMtcSchedules != null && Hibernate.isInitialized(aircraftMtcSchedules)) {
            aircraftMtcSchedules.forEach(_aircraftMtcSchedule -> _aircraftMtcSchedule.setAircraft(aircraft));
        }
        if(aircraftUtilizationInfos != null && Hibernate.isInitialized(aircraftUtilizationInfos)) {
            aircraftUtilizationInfos.forEach(_aircraftUtilizationInfo -> _aircraftUtilizationInfo.setAircraft(aircraft));
        }
        if(redeliveryMatrixes != null && Hibernate.isInitialized(redeliveryMatrixes)) {
            redeliveryMatrixes.forEach(_redeliveryMatrix -> _redeliveryMatrix.setAircraft(aircraft));
        }
        if(taskSchedules != null && Hibernate.isInitialized(taskSchedules)) {
            taskSchedules.forEach(_taskSchedule -> _taskSchedule.setAircraft(aircraft));
        }

        this.wmGenericDao.update(aircraft);
        this.wmGenericDao.refresh(aircraft);

        // Deleting children which are not present in the list.
        if(aircraftMtcSchedules != null && Hibernate.isInitialized(aircraftMtcSchedules) && !aircraftMtcSchedules.isEmpty()) {
            List<AircraftMtcSchedule> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, AircraftMtcSchedule.class,
                        new DaoUtils.ChildrenFilter<>("aircraft", aircraft, aircraftMtcSchedules)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_aircraftMtcSchedule -> aircraftMtcScheduleService.delete(_aircraftMtcSchedule));
            aircraft.setAircraftMtcSchedules(aircraftMtcSchedules);
        }

        // Deleting children which are not present in the list.
        if(aircraftUtilizationInfos != null && Hibernate.isInitialized(aircraftUtilizationInfos) && !aircraftUtilizationInfos.isEmpty()) {
            List<AircraftUtilizationInfo> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, AircraftUtilizationInfo.class,
                        new DaoUtils.ChildrenFilter<>("aircraft", aircraft, aircraftUtilizationInfos)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_aircraftUtilizationInfo -> aircraftUtilizationInfoService.delete(_aircraftUtilizationInfo));
            aircraft.setAircraftUtilizationInfos(aircraftUtilizationInfos);
        }

        // Deleting children which are not present in the list.
        if(redeliveryMatrixes != null && Hibernate.isInitialized(redeliveryMatrixes) && !redeliveryMatrixes.isEmpty()) {
            List<RedeliveryMatrix> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, RedeliveryMatrix.class,
                        new DaoUtils.ChildrenFilter<>("aircraft", aircraft, redeliveryMatrixes)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_redeliveryMatrix -> redeliveryMatrixService.delete(_redeliveryMatrix));
            aircraft.setRedeliveryMatrixes(redeliveryMatrixes);
        }

        // Deleting children which are not present in the list.
        if(taskSchedules != null && Hibernate.isInitialized(taskSchedules) && !taskSchedules.isEmpty()) {
            List<TaskSchedule> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, TaskSchedule.class,
                        new DaoUtils.ChildrenFilter<>("aircraft", aircraft, taskSchedules)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_taskSchedule -> taskScheduleService.delete(_taskSchedule));
            aircraft.setTaskSchedules(taskSchedules);
        }

        return aircraft;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public Aircraft delete(Integer aircraftId) {
        LOGGER.debug("Deleting Aircraft with id: {}", aircraftId);
        Aircraft deleted = this.wmGenericDao.findById(aircraftId);
        if (deleted == null) {
            LOGGER.debug("No Aircraft found with id: {}", aircraftId);
            throw new EntityNotFoundException(String.valueOf(aircraftId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public void delete(Aircraft aircraft) {
        LOGGER.debug("Deleting Aircraft with {}", aircraft);
        this.wmGenericDao.delete(aircraft);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<Aircraft> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Aircrafts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<Aircraft> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Aircrafts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelga for table Aircraft to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelga for table Aircraft to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<AircraftMtcSchedule> findAssociatedAircraftMtcSchedules(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated aircraftMtcSchedules");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("aircraft.id = '" + id + "'");

        return aircraftMtcScheduleService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<AircraftUtilizationInfo> findAssociatedAircraftUtilizationInfos(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated aircraftUtilizationInfos");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("aircraft.id = '" + id + "'");

        return aircraftUtilizationInfoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<RedeliveryMatrix> findAssociatedRedeliveryMatrixes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated redeliveryMatrixes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("aircraft.id = '" + id + "'");

        return redeliveryMatrixService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<TaskSchedule> findAssociatedTaskSchedules(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taskSchedules");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("aircraft.id = '" + id + "'");

        return taskScheduleService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TaskScheduleService instance
     */
    protected void setTaskScheduleService(TaskScheduleService service) {
        this.taskScheduleService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AircraftMtcScheduleService instance
     */
    protected void setAircraftMtcScheduleService(AircraftMtcScheduleService service) {
        this.aircraftMtcScheduleService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AircraftUtilizationInfoService instance
     */
    protected void setAircraftUtilizationInfoService(AircraftUtilizationInfoService service) {
        this.aircraftUtilizationInfoService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RedeliveryMatrixService instance
     */
    protected void setRedeliveryMatrixService(RedeliveryMatrixService service) {
        this.redeliveryMatrixService = service;
    }

}