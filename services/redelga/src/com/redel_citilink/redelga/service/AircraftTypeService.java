/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.Aircraft;
import com.redel_citilink.redelga.AircraftType;

/**
 * Service object for domain model class {@link AircraftType}.
 */
public interface AircraftTypeService {

    /**
     * Creates a new AircraftType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AircraftType if any.
     *
     * @param aircraftType Details of the AircraftType to be created; value cannot be null.
     * @return The newly created AircraftType.
     */
    AircraftType create(@Valid AircraftType aircraftType);


	/**
     * Returns AircraftType by given id if exists.
     *
     * @param aircrafttypeId The id of the AircraftType to get; value cannot be null.
     * @return AircraftType associated with the given aircrafttypeId.
	 * @throws EntityNotFoundException If no AircraftType is found.
     */
    AircraftType getById(Integer aircrafttypeId);

    /**
     * Find and return the AircraftType by given id if exists, returns null otherwise.
     *
     * @param aircrafttypeId The id of the AircraftType to get; value cannot be null.
     * @return AircraftType associated with the given aircrafttypeId.
     */
    AircraftType findById(Integer aircrafttypeId);

	/**
     * Find and return the list of AircraftTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param aircrafttypeIds The id's of the AircraftType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AircraftTypes associated with the given aircrafttypeIds.
     */
    List<AircraftType> findByMultipleIds(List<Integer> aircrafttypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AircraftType. It replaces all fields of the existing AircraftType with the given aircraftType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AircraftType if any.
     *
     * @param aircraftType The details of the AircraftType to be updated; value cannot be null.
     * @return The updated AircraftType.
     * @throws EntityNotFoundException if no AircraftType is found with given input.
     */
    AircraftType update(@Valid AircraftType aircraftType);

    /**
     * Deletes an existing AircraftType with the given id.
     *
     * @param aircrafttypeId The id of the AircraftType to be deleted; value cannot be null.
     * @return The deleted AircraftType.
     * @throws EntityNotFoundException if no AircraftType found with the given id.
     */
    AircraftType delete(Integer aircrafttypeId);

    /**
     * Deletes an existing AircraftType with the given object.
     *
     * @param aircraftType The instance of the AircraftType to be deleted; value cannot be null.
     */
    void delete(AircraftType aircraftType);

    /**
     * Find all AircraftTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AircraftTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AircraftType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AircraftTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AircraftTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<AircraftType> findAll(String query, Pageable pageable);

    /**
     * Exports all AircraftTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AircraftTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AircraftTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AircraftType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated aircrafts for given AircraftType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Aircraft instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Aircraft> findAssociatedAircrafts(Integer id, Pageable pageable);

}