/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.RedeliveryMatrix;


/**
 * ServiceImpl object for domain model class RedeliveryMatrix.
 *
 * @see RedeliveryMatrix
 */
@Service("redelga.RedeliveryMatrixService")
@Validated
public class RedeliveryMatrixServiceImpl implements RedeliveryMatrixService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedeliveryMatrixServiceImpl.class);


    @Autowired
    @Qualifier("redelga.RedeliveryMatrixDao")
    private WMGenericDao<RedeliveryMatrix, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RedeliveryMatrix, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public RedeliveryMatrix create(RedeliveryMatrix redeliveryMatrix) {
        LOGGER.debug("Creating a new RedeliveryMatrix with information: {}", redeliveryMatrix);

        RedeliveryMatrix redeliveryMatrixCreated = this.wmGenericDao.create(redeliveryMatrix);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(redeliveryMatrixCreated);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public RedeliveryMatrix getById(Integer redeliverymatrixId) {
        LOGGER.debug("Finding RedeliveryMatrix by id: {}", redeliverymatrixId);
        return this.wmGenericDao.findById(redeliverymatrixId);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public RedeliveryMatrix findById(Integer redeliverymatrixId) {
        LOGGER.debug("Finding RedeliveryMatrix by id: {}", redeliverymatrixId);
        try {
            return this.wmGenericDao.findById(redeliverymatrixId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RedeliveryMatrix found with id: {}", redeliverymatrixId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public List<RedeliveryMatrix> findByMultipleIds(List<Integer> redeliverymatricesId, boolean orderedReturn) {
        LOGGER.debug("Finding RedeliveryMatrices by ids: {}", redeliverymatricesId);

        return this.wmGenericDao.findByMultipleIds(redeliverymatricesId, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "redelgaTransactionManager")
    @Override
    public RedeliveryMatrix update(RedeliveryMatrix redeliveryMatrix) {
        LOGGER.debug("Updating RedeliveryMatrix with information: {}", redeliveryMatrix);

        this.wmGenericDao.update(redeliveryMatrix);
        this.wmGenericDao.refresh(redeliveryMatrix);

        return redeliveryMatrix;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public RedeliveryMatrix delete(Integer redeliverymatrixId) {
        LOGGER.debug("Deleting RedeliveryMatrix with id: {}", redeliverymatrixId);
        RedeliveryMatrix deleted = this.wmGenericDao.findById(redeliverymatrixId);
        if (deleted == null) {
            LOGGER.debug("No RedeliveryMatrix found with id: {}", redeliverymatrixId);
            throw new EntityNotFoundException(String.valueOf(redeliverymatrixId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "redelgaTransactionManager")
    @Override
    public void delete(RedeliveryMatrix redeliveryMatrix) {
        LOGGER.debug("Deleting RedeliveryMatrix with {}", redeliveryMatrix);
        this.wmGenericDao.delete(redeliveryMatrix);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<RedeliveryMatrix> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RedeliveryMatrices");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<RedeliveryMatrix> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RedeliveryMatrices");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service redelga for table RedeliveryMatrix to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service redelga for table RedeliveryMatrix to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "redelgaTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}