/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.redel_citilink.redelga.AircraftUtilizationInfo;

/**
 * Service object for domain model class {@link AircraftUtilizationInfo}.
 */
public interface AircraftUtilizationInfoService {

    /**
     * Creates a new AircraftUtilizationInfo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AircraftUtilizationInfo if any.
     *
     * @param aircraftUtilizationInfo Details of the AircraftUtilizationInfo to be created; value cannot be null.
     * @return The newly created AircraftUtilizationInfo.
     */
    AircraftUtilizationInfo create(@Valid AircraftUtilizationInfo aircraftUtilizationInfo);


	/**
     * Returns AircraftUtilizationInfo by given id if exists.
     *
     * @param aircraftutilizationinfoId The id of the AircraftUtilizationInfo to get; value cannot be null.
     * @return AircraftUtilizationInfo associated with the given aircraftutilizationinfoId.
	 * @throws EntityNotFoundException If no AircraftUtilizationInfo is found.
     */
    AircraftUtilizationInfo getById(Integer aircraftutilizationinfoId);

    /**
     * Find and return the AircraftUtilizationInfo by given id if exists, returns null otherwise.
     *
     * @param aircraftutilizationinfoId The id of the AircraftUtilizationInfo to get; value cannot be null.
     * @return AircraftUtilizationInfo associated with the given aircraftutilizationinfoId.
     */
    AircraftUtilizationInfo findById(Integer aircraftutilizationinfoId);

	/**
     * Find and return the list of AircraftUtilizationInfos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param aircraftutilizationinfoIds The id's of the AircraftUtilizationInfo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AircraftUtilizationInfos associated with the given aircraftutilizationinfoIds.
     */
    List<AircraftUtilizationInfo> findByMultipleIds(List<Integer> aircraftutilizationinfoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AircraftUtilizationInfo. It replaces all fields of the existing AircraftUtilizationInfo with the given aircraftUtilizationInfo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AircraftUtilizationInfo if any.
     *
     * @param aircraftUtilizationInfo The details of the AircraftUtilizationInfo to be updated; value cannot be null.
     * @return The updated AircraftUtilizationInfo.
     * @throws EntityNotFoundException if no AircraftUtilizationInfo is found with given input.
     */
    AircraftUtilizationInfo update(@Valid AircraftUtilizationInfo aircraftUtilizationInfo);

    /**
     * Deletes an existing AircraftUtilizationInfo with the given id.
     *
     * @param aircraftutilizationinfoId The id of the AircraftUtilizationInfo to be deleted; value cannot be null.
     * @return The deleted AircraftUtilizationInfo.
     * @throws EntityNotFoundException if no AircraftUtilizationInfo found with the given id.
     */
    AircraftUtilizationInfo delete(Integer aircraftutilizationinfoId);

    /**
     * Deletes an existing AircraftUtilizationInfo with the given object.
     *
     * @param aircraftUtilizationInfo The instance of the AircraftUtilizationInfo to be deleted; value cannot be null.
     */
    void delete(AircraftUtilizationInfo aircraftUtilizationInfo);

    /**
     * Find all AircraftUtilizationInfos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AircraftUtilizationInfos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AircraftUtilizationInfo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AircraftUtilizationInfos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AircraftUtilizationInfos.
     *
     * @see Pageable
     * @see Page
     */
    Page<AircraftUtilizationInfo> findAll(String query, Pageable pageable);

    /**
     * Exports all AircraftUtilizationInfos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AircraftUtilizationInfos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AircraftUtilizationInfos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AircraftUtilizationInfo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}