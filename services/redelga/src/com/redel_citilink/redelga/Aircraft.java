/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.redel_citilink.redelga;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Aircraft generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`aircraft`")
public class Aircraft implements Serializable {

    private Integer id;
    private String tailNumber;
    private String company;
    private String msn;
    private Integer typeId;
    private Date redelDate;
    private AircraftType aircraftType;
    private List<AircraftMtcSchedule> aircraftMtcSchedules;
    private List<AircraftUtilizationInfo> aircraftUtilizationInfos;
    private List<RedeliveryMatrix> redeliveryMatrixes;
    private List<TaskSchedule> taskSchedules;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`tail_number`", nullable = true, length = 60)
    public String getTailNumber() {
        return this.tailNumber;
    }

    public void setTailNumber(String tailNumber) {
        this.tailNumber = tailNumber;
    }

    @Column(name = "`company`", nullable = true, length = 60)
    public String getCompany() {
        return this.company;
    }

    public void setCompany(String company) {
        this.company = company;
    }

    @Column(name = "`msn`", nullable = true, length = 60)
    public String getMsn() {
        return this.msn;
    }

    public void setMsn(String msn) {
        this.msn = msn;
    }

    @Column(name = "`type_id`", nullable = true, scale = 0, precision = 10)
    public Integer getTypeId() {
        return this.typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    @Column(name = "`redel_date`", nullable = true)
    public Date getRedelDate() {
        return this.redelDate;
    }

    public void setRedelDate(Date redelDate) {
        this.redelDate = redelDate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`type_id`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_aircraft_type_TO_aircO3X7D`"))
    @Fetch(FetchMode.JOIN)
    public AircraftType getAircraftType() {
        return this.aircraftType;
    }

    public void setAircraftType(AircraftType aircraftType) {
        if(aircraftType != null) {
            this.typeId = aircraftType.getId();
        }

        this.aircraftType = aircraftType;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "aircraft")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<AircraftMtcSchedule> getAircraftMtcSchedules() {
        return this.aircraftMtcSchedules;
    }

    public void setAircraftMtcSchedules(List<AircraftMtcSchedule> aircraftMtcSchedules) {
        this.aircraftMtcSchedules = aircraftMtcSchedules;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "aircraft")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<AircraftUtilizationInfo> getAircraftUtilizationInfos() {
        return this.aircraftUtilizationInfos;
    }

    public void setAircraftUtilizationInfos(List<AircraftUtilizationInfo> aircraftUtilizationInfos) {
        this.aircraftUtilizationInfos = aircraftUtilizationInfos;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "aircraft")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<RedeliveryMatrix> getRedeliveryMatrixes() {
        return this.redeliveryMatrixes;
    }

    public void setRedeliveryMatrixes(List<RedeliveryMatrix> redeliveryMatrixes) {
        this.redeliveryMatrixes = redeliveryMatrixes;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "aircraft")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<TaskSchedule> getTaskSchedules() {
        return this.taskSchedules;
    }

    public void setTaskSchedules(List<TaskSchedule> taskSchedules) {
        this.taskSchedules = taskSchedules;
    }

    @PostPersist
    public void onPostPersist() {
        if(aircraftMtcSchedules != null) {
            aircraftMtcSchedules.forEach(_aircraftMtcSchedule -> _aircraftMtcSchedule.setAircraft(this));
        }
        if(aircraftUtilizationInfos != null) {
            aircraftUtilizationInfos.forEach(_aircraftUtilizationInfo -> _aircraftUtilizationInfo.setAircraft(this));
        }
        if(redeliveryMatrixes != null) {
            redeliveryMatrixes.forEach(_redeliveryMatrix -> _redeliveryMatrix.setAircraft(this));
        }
        if(taskSchedules != null) {
            taskSchedules.forEach(_taskSchedule -> _taskSchedule.setAircraft(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Aircraft)) return false;
        final Aircraft aircraft = (Aircraft) o;
        return Objects.equals(getId(), aircraft.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}